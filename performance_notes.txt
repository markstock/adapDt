Acceleration error vs. N, float vs. double
N		random		incr_acc	decr_acc	incr_force	decr_force	incr_mass	decr_mass
1000	4.847e-07	5.214e-07	4.645e-07	4.421e-07	6.079e-07	4.386e-07	6.499e-07
10000	1.475e-06	1.662e-06	1.396e-06	1.399e-06	1.898e-06	1.319e-06	2.050e-06
100000	5.201e-06	6.936e-06	5.297e-06	4.469e-06	1.021e-05	4.151e-06	1.043e-05
Conclusion: best to order by mass, increasing

RMS error vs. time step magnitude (measure of advection order)
All 10k particles over 10 steps, errors at final step, float vs double
dt		acc			vel			pos
0.00001	1.567e-06	3.086e-07	7.467e-08
0.0001	1.576e-06	5.871e-07	7.480e-08
0.001	3.020e-06	7.006e-07	1.186e-07	little further accuracy to be gained
0.002	4.146e-06	1.664e-06	8.055e-07
0.01	2.535e-03	1.140e-05	9.717e-06
0.02	9.534e-04	8.306e-06	7.887e-06

Better test, to a definitive end time, still dbl vs float (not float vs. "true solution")
dt		nsteps	acc			vel			pos
0.1		1		1.399e-06	1.399e-06	1.493e-06
0.01	10		2.535e-03	1.140e-05	9.717e-06
0.001	100		3.049e-03	8.856e-06	3.890e-06
0.0001	1000	2.128e-02	3.384e-03	2.758e-04

0.001 x 100 steps:
   particle 1000  fp32   6.728731   4.660134  -0.786215  fp64   6.728740   4.660133  -0.786224
   particle 3000  fp32  -1.533406  -1.871629   0.100189  fp64  -1.533402  -1.871652   0.100184
   particle 5000  fp32  -4.835177   8.460896   7.216947  fp64  -4.835204   8.460890   7.216928
   particle 7000  fp32  -2.704675   5.196481   0.540620  fp64  -2.704685   5.196474   0.540605
   particle 9000  fp32   0.236038   4.287914   0.816008  fp64   0.236063   4.287901   0.816005

0.0001 x 1000 steps:
   particle 1000  fp32   3.226315   5.006965  -0.600970  fp64   3.226345   5.006943  -0.600942
   particle 3000  fp32   0.293515  -0.024989   0.459166  fp64   0.296804  -0.024047   0.457485
   particle 5000  fp32  -6.798312   6.835475   4.662713  fp64  -6.798297   6.835453   4.662710
   particle 7000  fp32   0.261812  -0.028464  -0.100863  fp64   0.260994  -0.029488  -0.099222
   particle 9000  fp32   0.290248  -0.019813   0.155711  fp64   0.288634  -0.018816   0.156576

Now, run a more time-resolved, double precision calculation to find the "true" solution
Always use 10k particles at a final time of 0.01
What dt must the "true" solution use to be deemed correct-enough?
Tests here with float calculation at dt=0.001 and 10 step

At dt=0.001 and 10 steps (same as float, we're seeing precision effects only)
   particle 1000  fp32  -0.691119  -0.766160   0.160650  fp64  -0.691119  -0.766160   0.160650
   particle 3000  fp32   0.466399  -0.202943   0.282341  fp64   0.466399  -0.202943   0.282341
   particle 5000  fp32   0.077445  -0.471202  -0.622424  fp64   0.077445  -0.471202  -0.622424
   particle 7000  fp32   0.345467   0.497836  -0.088789  fp64   0.345467   0.497836  -0.088789
   particle 9000  fp32   0.422493   0.751414   0.135892  fp64   0.422493   0.751414   0.135892
			(3.020e-06 RMS error vs. dble, acceleration)
			(7.006e-07 RMS error vs. dble, velocity)
			(1.186e-07 RMS error vs. dble, position)

At dt=0.0001 and 100 steps (the "true" solution does change)
   particle 1000  fp32  -0.691119  -0.766160   0.160650  fp64  -0.690642  -0.765863   0.160616
   particle 3000  fp32   0.466399  -0.202943   0.282341  fp64   0.466999  -0.203021   0.281363
   particle 5000  fp32   0.077445  -0.471202  -0.622424  fp64   0.078963  -0.471329  -0.621372
   particle 7000  fp32   0.345467   0.497836  -0.088789  fp64   0.346186   0.496005  -0.088799
   particle 9000  fp32   0.422493   0.751414   0.135892  fp64   0.426057   0.749961   0.133946
			(3.028e-01 RMS error vs. dble, acceleration)
			(4.446e-02 RMS error vs. dble, velocity)
			(3.306e-03 RMS error vs. dble, position)

At dt=0.00001 and 1000 steps (this is probably appropriate, but takes a few minutes)
   particle 1000  fp32  -0.691119  -0.766160   0.160650  fp64  -0.690589  -0.765830   0.160612
   particle 3000  fp32   0.466399  -0.202943   0.282341  fp64   0.467091  -0.203030   0.281222
   particle 5000  fp32   0.077445  -0.471202  -0.622424  fp64   0.079189  -0.471325  -0.621237
   particle 7000  fp32   0.345467   0.497836  -0.088789  fp64   0.346269   0.495795  -0.088801
   particle 9000  fp32   0.422493   0.751414   0.135892  fp64   0.426448   0.749792   0.133676
			(3.291e-01 RMS error vs. dble, acceleration)
			(4.928e-02 RMS error vs. dble, velocity)
			(3.664e-03 RMS error vs. dble, position)

Now, with a fp64 solution of 10k particles to t=0.01 using 1000 steps, we compare the fp32 solutions
./adapDt.bin -n=10000 -dt=0.001 -end=0.01 -i=initial.dat -c=truesoln.dat
dt		nsteps	vel			pos			max-vel		max-pos
0.01	1		1.819e-01	1.651e-02	1.079e+00	1.381e-01
0.001	10		4.928e-02	3.664e-03	4.424e-01	2.880e-02
0.0001	100		5.529e-03	3.772e-04	4.604e-02	3.777e-03
Now we see proper O(dt) error behavior!

Let's see how the error is distributed
./adapDt.bin -n=10000 -dt=0.001 -end=0.01 -i=initial.dat -c=truesoln.dat -error=err0p001.dat
yes, ordering my force does put the more error-prone particles in the top part of the array

Can we design a two-tiered time stepper that saves time but gives equal accuracy?

First take: just force top 1/2 of particles to take 2 time steps, saving and re-using some accelerations
./adapDt.bin -n=10000 -dt=0.001 -end=0.01 -i=initial.dat -c=truesoln.dat -error=err0p001a.dat
does 25% more work than if all particles took the full outer time step
gives
dt		nsteps	vel			pos			max-vel		max-pos
0.01*	1		1.592e-01	1.225e-02	1.131e+00	1.045e-01
0.001*	10		3.198e-02	2.365e-03	2.162e-01	2.296e-02
0.0001*	100		3.054e-03	2.205e-04	2.598e-02	2.674e-03
Conclusion: at first take, we're able to nearly halve the error with only 25% (not 100%) more work

Also, to allow comparisons to "true" solutions, but allow particles to be re-ordered frequently,
we need the comparison feature to sort and reorder both test and true data.

Done, now let's pre-sort by mass instead of force:
dt		nsteps	vel			pos			max-vel		max-pos
0.002*	5		5.313e-02	4.027e-03	4.424e-01	2.893e-02
0.001*	10		2.957e-02	2.176e-03	2.081e-01	1.719e-02
This is even better!
Full-calculation at 0.001 takes 2.5s is almost the same error as 2-tier calc with 0.002 taking 1.3 sec.


Now, can we make this hierarchical, and can we make it solution-adaptive?
Must be able to push the most error-prone particles up to the top of the array.

./adapDt.bin -n=10000 -dt=0.001 -end=0.01 -i=initial.dat -c=truesorted.dat
slow fraction 0.6
One level (2.2s)
		(3.664e-03 / 2.880e-02 mean/max RMS error vs. dble, position)
		(4.928e-02 / 4.424e-01 mean/max RMS error vs. dble, velocity)
Two levels (2.5s)
		(2.351e-03 / 2.083e-02 mean/max RMS error vs. dble, position)
		(3.149e-02 / 2.088e-01 mean/max RMS error vs. dble, velocity)
Three levels (2.6s) 8400-9999 are 0.00025
		(2.098e-03 / 2.083e-02 mean/max RMS error vs. dble, position)
		(2.723e-02 / 2.012e-01 mean/max RMS error vs. dble, velocity)

same, slow fraction 0.4
Two levels (3.0s)
		(2.073e-03 / 1.714e-02 mean/max RMS error vs. dble, position)
		(2.854e-02 / 2.077e-01 mean/max RMS error vs. dble, velocity)
Three levels (3.6s) 6400 to 9999 are 0.00025
		(1.424e-03 / 1.099e-02 mean/max RMS error vs. dble, position)
		(1.845e-02 / 1.122e-01 mean/max RMS error vs. dble, velocity)
Four levels (4.1s) 7840 to 9999 are 0.000125
		(1.284e-03 / 1.099e-02 mean/max RMS error vs. dble, position)
		(1.579e-02 / 1.123e-01 mean/max RMS error vs. dble, velocity)

Try to match that using uniform time stepping
0.0005 (4.2s)
		(1.956e-03 / 1.709e-02 mean/max RMS error vs. dble, position)
		(2.752e-02 / 2.072e-01 mean/max RMS error vs. dble, velocity)
0.0004 (5.1s)
		(1.578e-03 / 1.423e-02 mean/max RMS error vs. dble, position)
		(2.243e-02 / 1.702e-01 mean/max RMS error vs. dble, velocity)
0.00033333333 (6.2s)
		(1.319e-03 / 1.216e-02 mean/max RMS error vs. dble, position)
		(1.888e-02 / 1.423e-01 mean/max RMS error vs. dble, velocity)
0.00025 (9.2s)
		(9.893e-04 / 9.380e-03 mean/max RMS error vs. dble, position)
		(1.428e-02 / 1.107e-01 mean/max RMS error vs. dble, velocity)
This is actually better, but takes over 2x as long

Generally, for a linear distribution of masses, this method is 2x as fast
for the same accuracy, or 2x as accurate for the same speed.


Want to generate a more realistic mass distribution (few heavier, many lighter particles)
Mass vs. count is M^-1 relationship?
https://en.wikipedia.org/wiki/Initial_mass_function

Also would like to implement this for Verlet integrator


# Performance of a disk with mass focused on the center

# Make the disk
./adapDt.bin -n=1000 -s=0 -o=disk1kinit.dat
# Find the "true" solution
./adapDt.bin -n=1000 -i=disk1kinit.dat -dt=0.001 -end=1.0 -true -o=disk1ktruet1.dat
# run test and compare to true, writing out test
./adapDt.bin -n=1000 -i=disk1kinit.dat -dt=0.001 -end=1.0 -c=disk1ktruet1.dat -o=disk1ktestt1.dat
# more tests
./adapDt.bin -n=1000 -i=disk1kinit.dat -dt=0.01 -end=1.0 -c=disk1ktruet1.dat
./adapDt.bin -n=1000 -i=disk1kinit.dat -dt=0.001 -end=1.0 -c=disk1ktruet1.dat
./adapDt.bin -n=1000 -i=disk1kinit.dat -dt=0.0001 -end=1.0 -c=disk1ktruet1.dat

error vs level
dt		levs	time	pos err					vel err
0.001	1		3.2319	3.963e-01 / 1.819e+00	7.715e-01 / 5.163e+00
0.001	4		6.7788	3.620e-01 / 2.442e+00	7.068e-01 / 3.839e+00
0.0001	1		24.106	4.224e-01 / 2.523e+00	8.258e-01 / 4.676e+00
0.0001	4		57.409	2.053e-01 / 1.773e+00	6.837e-01 / 5.879e+00
0.00001	1		261.40	1.695e-01 / 1.933e+00	5.362e-01 / 3.797e+00

# maybe only go to 0.01 end time?

# make the disk and sort on jerk magnitude
./adapDt.bin -n=1000 -s=0 -o=disk1kinit.dat
./adapDt.bin -n=1000 -i=disk1kinit.dat -dt=0.000001 -end=0.01 -true -o=disk1ktruep01.dat
./adapDt.bin -n=1000 -i=disk1kinit.dat -dt=0.000001 -end=0.1 -true -o=disk1ktruep1.dat
# run tests vs that
./adapDt.bin -n=1000 -i=disk1kinit.dat -dt=0.0001 -end=0.1 -c=disk1ktruep1.dat

error vs level (tp)
dt		levs	time	pos err					vel err
0.01	1		0.0387	2.223e-02 / 2.945e-01	4.296e-01 / 8.542e+00
0.001	1		0.2539	6.799e-03 / 1.060e-01	1.827e-01 / 3.623e+00
0.0001	1		2.528	9.062e-04 / 1.413e-02	8.143e-02 / 2.256e+00
0.00001	1		26.52	1.275e-04 / 2.528e-03	7.231e-03 / 1.482e-01
0.001	2		0.3632	4.057e-03 / 6.219e-02	1.157e-01 / 2.464e+00
0.001	3		0.4178	2.623e-03 / 4.322e-02	9.694e-02 / 1.686e+00
0.001	4		0.5103	1.254e-03 / 2.174e-02	1.059e-01 / 2.871e+00
0.001	5		0.6774	5.328e-04 / 7.259e-03	4.477e-02 / 1.234e+00
0.001	6		0.6922	3.317e-04 / 5.265e-03	2.206e-02 / 5.197e-01
0.001	7		1.015	1.942e-04 / 3.643e-03	1.139e-02 / 2.241e-01
0.001	8		1.701	9.703e-05 / 1.949e-03	5.230e-03 / 1.015e-01	better than 0.00001 at 26 sec!
0.01	8		0.2355	6.970e-04 / 1.053e-02	5.949e-02 / 1.637e+00
0.01	9		0.3232	5.194e-04 / 8.675e-03	3.057e-02 / 6.847e-01
0.01	10		0.5632	4.097e-04 / 6.758e-03	2.651e-02 / 6.734e-01	can't get much better with 1k parts

# now make a larger simulation on zen0
./adapDt.bin -n=10000 -s=0 -o=disk10kinit.dat
./adapDt.bin -n=10000 -i=disk10kinit.dat -dt=0.000001 -end=0.01 -true -o=disk10ktruep01.dat
# true solution needs 10000 parts x 10000 parts x 10000 steps x 22 flops = 22 TF and 266 sec
./adapDt.bin -n=10000 -i=disk10kinit.dat -dt=0.01 -end=0.01 -l=1 -c=disk10ktruep01.dat

error vs level (zen0)
dt		levs	time	pos err					vel err
0.01	1		0.0453	1.312e-03 / 8.750e-02	1.723e-01 / 9.605e+00
0.001	1		0.2635	2.517e-04 / 1.944e-02	3.832e-02 / 3.069e+00
0.0001	1		2.892	4.742e-05 / 4.335e-03	9.496e-03 / 8.913e-01
0.00005	1		5.552	2.527e-05 / 2.329e-03	5.231e-03 / 4.934e-01
0.00002	1		13.22	1.030e-05 / 9.529e-04	2.185e-03 / 2.067e-01
0.00001	1		26.59	5.326e-06 / 4.599e-04	1.063e-03 / 1.007e-01
0.000005	1	53.18	7.384e-06 / 2.064e-04	4.791e-04 / 4.540e-02
0.01	3		0.03626	5.062e-04 / 3.658e-02	5.600e-02 / 3.371e+00
0.01	5		0.06668	1.848e-04 / 1.521e-02	3.142e-02 / 2.742e+00
0.01	7		0.05316	6.908e-05 / 6.253e-03	1.344e-02 / 1.255e+00
0.01	9		0.1027	2.001e-05 / 1.844e-03	4.171e-03 / 3.936e-01
0.01	11		0.1535	5.169e-06 / 4.473e-04	1.050e-03 / 9.757e-02	160x speedup vs. 26.6s case
0.01	13		0.1644	2.320e-06 / 6.989e-05	3.394e-04 / 1.683e-02
0.001	3		0.3614	9.953e-05 / 8.855e-03	1.870e-02 / 1.729e+00
0.001	5		0.3952	3.111e-05 / 2.861e-03	6.380e-03 / 6.011e-01
0.001	7		0.5501	7.979e-06 / 7.395e-04	1.701e-03 / 1.610e-01
0.001	9		1.197	1.628e-06 / 1.503e-04	3.495e-04 / 3.310e-02	43x speedup vs. 53s case
0.001	11		1.359	2.103e-07 / 2.641e-06	2.057e-05 / 4.022e-04

# now can we make it adaptive?
# i.e. at every step, recompute jerk magnitude and reset slow-fast boundary

